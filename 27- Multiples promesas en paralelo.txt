Para hacer el llamado a múltiples promesas, nos apoyamos en un 
array de ids con el que luego construimos otro arreglo de Promesas, 
que pasaremos como parámetro a Promise.all( arregloDePromesas ), 
con las promesas podemos encadenar llamadas en paralelo, 
algo que no es posible usando callbacks.


        function obtenerPersonaje(id) {

            return new Promise((resolve, reject) => {
                fetch(API_URL + PEOPLE_URL.replace(":id", id), { model: 'cors' })
                    .then((response) => {
                        return Promise.resolve(response.json())
                    })
                    .then(json => {
                        resolve(json) // <-- Resolver la promesa, es decir que retorna el resultado si todo se ejecuto correctamente
                    })
                    .catch(function (err) {
                        reject(id) // <-- Rechazar la promesa, retorna el valor cuando sucede algun error
                    });
            })
        }


        // Multiples request en paralelo

        var ids= [1,2,3,4,5,6,7] // <-- array de id de personajes

        // Retorna un array de promesas
        var promesas = ids.map(function(id){
            return obtenerPersonaje(id)
        })